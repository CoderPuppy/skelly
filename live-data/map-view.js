// Generated by LiveScript 1.2.0
(function(){
  var LBase, LMapView;
  LBase = require('./base');
  LMapView = (function(superclass){
    var prototype = extend$((import$(LMapView, superclass).displayName = 'LMapView', LMapView), superclass).prototype, constructor = LMapView;
    function LMapView(parent, opts){
      var this$ = this;
      this.parent = parent;
      this.opts = opts != null
        ? opts
        : {};
      LMapView.superclass.call(this);
      this.parent.on('_update', function(update){
        var data;
        data = update[0];
        switch (data[0]) {
        case 'c':
          if (this$._checkPrefix(data[1])) {
            return this$.emit('_update', [['c', this$._unprefix(data[1]), data[2]], update[1], update[2]]);
          }
          break;
        case 'd':
          if (this$._checkPrefix(data[1])) {
            return this$.emit('_update', [['d', this$._unprefix(data[1]), data[2], data[3]], update[1], update[2]]);
          }
        }
      });
    }
    prototype._prefix = function(key){
      if (this.opts.prefix != null) {
        key = this.opts.prefix + ":" + key;
      }
      return key;
    };
    prototype._unprefix = function(key){
      if (this.opts.prefix != null) {
        key = key.substring(this.opts.prefix.length + 1);
      }
      return key;
    };
    prototype._checkPrefix = function(key){
      if (this.opts.prefix == null) {
        return true;
      }
      return key.substring(0, this.opts.prefix.length) === this.opts.prefix;
    };
    prototype.get = function(key){
      return this.parent.get(this._prefix(key));
    };
    prototype.set = function(key, val){
      this.parent.set(this._prefix(key), val);
      return this;
    };
    prototype.applyUpdate = function(update){
      var data;
      data = update[0];
      switch (data[0]) {
      case 'c':
        return this.parent.applyUpdate([['c', this._prefix(data[1]), data[2]], update[1], update[2]]);
      case 'd':
        return this.parent.applyUpdate([['d', this._prefix(data[1]), data[2], data[3]], update[1], update[2]]);
      default:
        return false;
      }
    };
    prototype.history = function(sources){
      var this$ = this;
      return this.parent.history().filter(function(update){
        var data;
        data = update[0];
        switch (data[0]) {
        case 'c':
        case 'd':
          return this$._checkPrefix(data[1]);
        default:
          return false;
        }
      });
    };
    return LMapView;
  }(LBase));
  LBase.MapView = LMapView;
  module.exports = LMapView;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
