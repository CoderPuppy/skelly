// Generated by LiveScript 1.2.0
(function(){
  var Scuttlebutt, utils, LBase, slice$ = [].slice;
  Scuttlebutt = require('scuttlebutt');
  utils = require('./utils');
  LBase = (function(superclass){
    var prototype = extend$((import$(LBase, superclass).displayName = 'LBase', LBase), superclass).prototype, constructor = LBase;
    LBase.types = {};
    LBase.register = function(type){
      return this.types[type.name.toLowerCase()] = type;
    };
    LBase.create = function(name){
      var args, ref$;
      args = slice$.call(arguments, 1);
      return typeof (ref$ = this.types)[name] === 'function' ? (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(ref$[name], args, function(){}) : void 8;
    };
    prototype.pipe = function(dest){
      this.createReadStream().pipe(dest.createWriteStream());
      return dest;
    };
    prototype.map = function(fn){
      var args, newLive, ref$;
      args = slice$.call(arguments, 1);
      newLive = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(this.constructor, this.constructor.mapCreationArgs(fn, this.creationArgs()), function(){});
      this.createReadStream().pipe((ref$ = this.constructor).mapper.apply(ref$, [fn].concat(slice$.call(args)))).pipe(newLive.createWriteStream());
      return newLive;
    };
    prototype.creationArgs = utils.dutyOfSubclass('creationArgs');
    prototype.applyUpdate = utils.dutyOfSubclass('applyUpdate');
    prototype.history = utils.dutyOfSubclass('history');
    function LBase(){
      LBase.superclass.apply(this, arguments);
    }
    return LBase;
  }(Scuttlebutt));
  module.exports = LBase;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
