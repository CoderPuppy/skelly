// Generated by LiveScript 1.2.0
(function(){
  var font, util, tty, levels, colors, Logger, exports, slice$ = [].slice;
  font = require('ansi-font');
  util = require('util');
  tty = require('tty');
  levels = ['debug', 'info', 'warn', 'error'];
  colors = ['green', 'green', 'yellow', 'red'];
  Logger = (function(){
    Logger.displayName = 'Logger';
    var prototype = Logger.prototype, constructor = Logger;
    function Logger(opts){
      var ref$;
      this.opts = opts != null
        ? opts
        : {};
      (ref$ = this.opts).level == null && (ref$.level = 'debug');
      (ref$ = this.opts).errout == null && (ref$.errout = process.stderr);
      (ref$ = this.opts).out == null && (ref$.out = process.stdout);
      (ref$ = this.opts).colors == null && (ref$.colors = tty.isatty(this.opts.out) && tty.isatty(this.opts.errout));
      if (typeof this.opts.level === 'string') {
        this.opts.level = levels.indexOf(this.opts.level);
      }
    }
    prototype.checkLevel = function(it){
      var ok;
      ok = typeof it === 'string'
        ? levels.indexOf(it) !== -1
        : typeof it === 'number' ? levels[it] != null : false;
      if (!ok) {
        throw new Error("Invalid level: " + it);
      }
    };
    prototype.logger = function(){
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(Logger, arguments, function(){});
    };
    prototype.output = function(level, text){
      this.checkLevel(level);
      if (level === 2 || level === 3) {
        return this.opts.errout.write(text + "\n");
      } else {
        return this.opts.out.write(text + "\n");
      }
    };
    prototype.fmt = function(level){
      var parts;
      parts = slice$.call(arguments, 1);
      this.checkLevel(level);
      return font[colors[level]]("[" + levels[level] + "]") + " " + util.format.apply(util, parts);
    };
    prototype.log = function(level){
      var parts;
      parts = slice$.call(arguments, 1);
      this.checkLevel(level);
      if (typeof level === 'string') {
        level = levels.indexOf(level);
      }
      if (level >= this.opts.level) {
        this.output(level, this.fmt.apply(this, [level].concat(slice$.call(parts))));
      }
      return this;
    };
    prototype.debug = function(){
      var a;
      a = slice$.call(arguments);
      return this.log.apply(this, ['debug'].concat(slice$.call(a)));
    };
    prototype.info = function(){
      var a;
      a = slice$.call(arguments);
      return this.log.apply(this, ['info'].concat(slice$.call(a)));
    };
    prototype.warn = function(){
      var a;
      a = slice$.call(arguments);
      return this.log.apply(this, ['warn'].concat(slice$.call(a)));
    };
    prototype.error = function(){
      var a;
      a = slice$.call(arguments);
      return this.log.apply(this, ['error'].concat(slice$.call(a)));
    };
    return Logger;
  }());
  exports = module.exports = new Logger;
}).call(this);
