// Generated by LiveScript 1.2.0
(function(){
  var EventEmitter, ecstatic, connect, Client, Primus, debug, http, util, App, log, Server, exports;
  EventEmitter = require('events').EventEmitter;
  ecstatic = require('ecstatic');
  connect = require('connect');
  Client = require('./client');
  Primus = require('primus');
  debug = require('debug')('skelly:server');
  http = require('http');
  util = require('util');
  App = require('./app');
  log = require('./log');
  Server = (function(superclass){
    var prototype = extend$((import$(Server, superclass).displayName = 'Server', Server), superclass).prototype, constructor = Server;
    function Server(opts){
      var fn, k, ref$, v;
      opts == null && (opts = {});
      fn = function(req, res){
        return fn.mw(req, res);
      };
      (function(){
        var ref$;
        this.opts = opts;
        (ref$ = this.opts).transport == null && (ref$.transport = 'sockjs');
        (ref$ = this.opts).primus == null && (ref$.primus = {});
        (ref$ = this.opts.primus).transformer == null && (ref$.transformer = this.opts.transport);
        (ref$ = this.opts).ecstatic == null && (ref$.ecstatic = {});
        (ref$ = this.opts.ecstatic).root == null && (ref$.root = this.opts['static']);
        this.app = new App;
        this.mw = connect();
        return this.mw.use(ecstatic(this.opts.ecstatic));
      }).call(fn);
      for (k in ref$ = Server.prototype) {
        v = ref$[k];
        fn[k] = v;
      }
      return fn;
    }
    prototype.httpServer = function(){
      var this$ = this;
      if (this.server == null) {
        this.server = http.createServer(this);
        this.primus = new Primus(this.server, this.opts.primus);
        this.primus.on('connection', function(spark){
          return this$.emit('client', new Client(this$.app, spark));
        });
      }
      return this.server;
    };
    prototype.listen = function(port, address){
      var this$ = this;
      port == null && (port = 3000);
      address == null && (address = '0.0.0.0');
      debug('Attempting to listen on: %s:%s', address, port);
      this.httpServer().listen(port, address, function(){
        var address;
        address = this$.httpServer().address();
        this$.app.log.info('Server listening on %s:%s', address != null ? address.address : void 8, address != null ? address.port : void 8);
        return this$.emit('listening', address);
      });
      return this;
    };
    return Server;
  }(EventEmitter));
  exports = module.exports = function(){
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args), t;
      return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(Server, arguments, function(){});
  };
  exports.Server = Server;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
