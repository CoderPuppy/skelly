// Generated by LiveScript 1.2.0
(function(){
  var ldata, findEl, children, textContent, value;
  ldata = require('../live-data');
  findEl = function(el){
    var oldEl;
    oldEl = null;
    while (el !== oldEl) {
      oldEl = el;
      if (el.el != null) {
        el = el.el;
      }
      if (el._el != null) {
        el = el._el;
      }
      if (el.node != null) {
        el = el.node;
      }
      if (el._node != null) {
        el = el._node;
      }
    }
    return el;
  };
  children = function(el, fn){
    var arr, els, i$, ref$, len$, child;
    el = findEl(el);
    arr = new ldata.Array;
    els = {};
    for (i$ = 0, len$ = (ref$ = el.childNodes).length; i$ < len$; ++i$) {
      child = ref$[i$];
      el.removeChild(child);
    }
    arr.on('insert', function(i, val, key){
      els[key] = findEl(fn(val));
      return el.insertBefore(els[key], els[arr.keys[i + 1]]);
    });
    arr.on('delete', function(i, val, key){
      return el.removeChild(els[key]);
    });
    return arr;
  };
  textContent = function(el){
    var val;
    el = findEl(el);
    val = new ldata.Value;
    val.on('update', function(it){
      return el.textContent = it;
    });
    return val;
  };
  value = function(el){
    var val, applyDom, applyModel;
    el = findEl(el);
    val = new ldata.Value;
    applyDom = function(d){
      return el.value = d;
    };
    applyModel = function(){
      return val.set(el.value);
    };
    val.on('update', applyDom);
    if (el.value) {
      applyModel;
    }
    el.addEventListener('input', applyModel);
    el.addEventListener('keyup', applyModel);
    return val;
  };
  exports.textContent = textContent;
  exports.children = children;
  exports.findEl = findEl;
  exports.value = value;
}).call(this);
